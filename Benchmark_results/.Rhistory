autoplot(roc_pr_curves, "ROC") +
scale_colour_manual("Model", values = palette_models, labels = labs_roc)
palette_models
roc_pr_curves
autoplot(roc_pr_curves, "ROC") +
scale_colour_manual("Model", values = palette_models, labels = labs_roc)
labs_roc
palette_models
palette_models
name_models
palette_models = palette_models[name_models]
palette_models
palette_models = list(IsoBayes = "#ef9b20",
IsoBayes_fast = "#edbf33",
IsoBayes_mRNA = "#ea5545",
IsoBayes_fast_mRNA = "#f46a9b",
TPM = "#50e991",
Baseline = "black")
get_roc(validation_dat, name_models, protease, palette_models)
pp
autoplot(roc_pr_curves, "ROC")
palette_models
autoplot(roc_pr_curves, "ROC")
palette_models$Baseline
palette_models$Baseline = "#50e991"
autoplot(roc_pr_curves, "ROC") +
scale_colour_manual("Model", values = palette_models, labels = labs_roc)
autoplot(roc_pr_curves, "ROC")
palette_models
palette_models = c("IsoBayes" = "#ef9b20",
"IsoBayes_fast" = "#edbf33",
"IsoBayes_mRNA" = "#ea5545",
"IsoBayes_fast_mRNA" = "#f46a9b",
"TPM" = "#50e991",
"Baseline" = "black")
name_models = c("IsoBayes_mRNA", "TPM", "Baseline")
get_roc(validation_dat, name_models, protease, palette_models)
pp
palette_models = c("IsoBayes" = "#ef9b20",
"IsoBayes_fast" = "#edbf33",
"IsoBayes_mRNA" = "#ea5545",
"IsoBayes_fast_mRNA" = "#f46a9b",
"TPM" = "#50e991",
"Baseline" = "#7eb0d5")
set.seed(0)
pp = get_roc(validation_dat, name_models, protease, palette_models)
get_roc = function(benchmark, name_models, protease, palette_models){
scores = list()
labels = list()
for (name_model in name_models) {
scores = append(scores, list(benchmark[, name_model]))
labels = append(labels, list(benchmark$Present))
}
roc_pr_curves = precrec::mmdata(scores, labels, name_models)
roc_pr_curves = precrec::evalmod(roc_pr_curves)
auc_roc = round(precrec::auc(roc_pr_curves)[precrec::auc(roc_pr_curves)[, "curvetypes"] == "ROC", "aucs"], 3)
#auc_pr = round(precrec::auc(roc_pr_curves)[precrec::auc(roc_pr_curves)[, "curvetypes"] == "PRC", "aucs"], 3)
labs_roc = paste0(name_models, "\nAUC: ", auc_roc)
#labs_pr = paste0(name_models, "\nAUC: ", auc_pr)
palette_models = palette_models[name_models]
pp = autoplot(roc_pr_curves, "ROC") +
scale_colour_manual("Model", values = palette_models, labels = labs_roc) +
geom_line(size=0.8) +
labs(title = "ROC curves") +
theme(plot.title = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 11, face = "bold"),
legend.title = element_text(size = 11, face = "bold"),
axis.text.x = element_text(size = 10, face = "bold"),
axis.text.y = element_text(size = 10, face = "bold"),
legend.text = element_text(size = 10)
)
pp
#autoplot(roc_pr_curves, "PR") + scale_colour_discrete(name="Models", breaks = name_models, labels=labs_pr) +
#ggtitle(paste0("PR curve ", protease))
}
name_models = c("IsoBayes_mRNA", "TPM", "Baseline")
pp = get_roc(validation_dat, name_models, protease, palette_models)
ggsave(glue("{path_to_res_mod}/{name}"))
ggsave(glue("{path_to_res_mod}/{name}.png"))
pp = get_roc(validation_dat, name_models, protease, palette_models)
ggsave(glue("{path_to_res_mod}/{name}.png"))
path_to_res_mod
load_merge_validation = function(path_to_res_mod, name, path_to_data, protease, res){
load(glue("{path_to_res_mod}/{name}_MCMC.RData"))
load(glue("{path_to_data}/No{protease}/Validation_prot_psm"))
validation_dat = merge(res$isoform_results, VALIDATION_DF_prot, by.y = "proteins", by.x = "Isoform")
validation_dat = merge(validation_dat, data_loaded$PROTEIN_DF[, c("protein_name", "Y_unique")],
by.y = "protein_name", by.x = "Isoform", all.x = TRUE)
validation_dat$Baseline = as.numeric(validation_dat$Y_unique > 0)
validation_dat
}
validation_dat = load_merge_validation(path_to_res_mod, name, path_to_data, protease, res)
colnames(validation_dat)[colnames(validation_dat) == "Prob_present"] = "IsoBayes_mRNA"
###############################
name = glue("OpenMS_mRNA_PEP")
###############################
for (protease in proteases) {
path_to_res_mod = glue("{path_to_res}/{name}/{protease}")
if(!dir.exists(path_to_res_mod)){dir.create(path_to_res_mod, recursive = TRUE)}
data_loaded = load_data(path_to_peptides_psm = as.character(glue("{path_to_data}/Only{protease}/merge_index_percolator_pep_switched_0.01.idXML")),
path_to_tpm = paste0(path_to_data, "/", tpm_file),
input_type = "openMS",
abundance_type = "psm",
PEP = TRUE,
FDR_thd = 0.01
)
save(data_loaded, file = glue("{path_to_res_mod}/{name}_data_loaded.RData"))
#load(glue("{path_to_res_mod}/{name}_data_loaded.RData"))
res = inference(data_loaded, map_iso_gene = NULL, n_cores = 8, K = 2000, thin = 1)
save(res, file = glue("{path_to_res_mod}/{name}_MCMC.RData"))
res = inference(data_loaded, map_iso_gene = NULL, n_cores = 8, K = 10000, thin = 1)
save(res, file = glue("{path_to_res_mod}/{name}_MCMC_10000.RData"))
validation_dat = load_merge_validation(path_to_res_mod, name, path_to_data, protease, res)
colnames(validation_dat)[colnames(validation_dat) == "Prob_present"] = "IsoBayes_mRNA"
name_models = c("IsoBayes_mRNA", "TPM", "Baseline")
pp = get_roc(validation_dat, name_models, protease, palette_models)
ggsave(glue("{path_to_res_mod}/{name}.png"))
}
###############################
name = glue("OpenMS_mRNA")
###############################
name = glue("OpenMS_mRNA_PEP")
###############################
for (protease in proteases) {
path_to_res_mod = glue("{path_to_res}/{name}/{protease}")
if(!dir.exists(path_to_res_mod)){dir.create(path_to_res_mod, recursive = TRUE)}
data_loaded = load_data(path_to_peptides_psm = as.character(glue("{path_to_data}/Only{protease}/merge_index_percolator_pep_switched_0.01.idXML")),
path_to_tpm = paste0(path_to_data, "/", tpm_file),
input_type = "openMS",
abundance_type = "psm",
PEP = TRUE,
FDR_thd = 0.01
)
save(data_loaded, file = glue("{path_to_res_mod}/{name}_data_loaded.RData"))
#load(glue("{path_to_res_mod}/{name}_data_loaded.RData"))
res = inference(data_loaded, map_iso_gene = NULL, n_cores = 8, K = 2000, thin = 1)
save(res, file = glue("{path_to_res_mod}/{name}_MCMC.RData"))
res = inference(data_loaded, map_iso_gene = NULL, n_cores = 8, K = 10000, thin = 5)
save(res, file = glue("{path_to_res_mod}/{name}_MCMC_10000.RData"))
validation_dat = load_merge_validation(path_to_res_mod, name, path_to_data, protease, res)
colnames(validation_dat)[colnames(validation_dat) == "Prob_present"] = "IsoBayes_mRNA"
name_models = c("IsoBayes_mRNA", "TPM", "Baseline")
pp = get_roc(validation_dat, name_models, protease, palette_models)
ggsave(glue("{path_to_res_mod}/{name}.png"))
}
validate_all_protease(proteases, path_to_res, name)
source(glue("{path_wd}/utils_function/validate_all_protease.R"))
load("/home/jbollon/prot_iso_mrna_dev/IsoBayes_paper/Model_results/jurkat/OpenMS_psm_proteo_mRNA_PEP_fdr_1/GluC/OpenMS_psm_proteo_mRNA_PEP_fdr_1_data_loaded.RData")
dim()
dim(data_loaded$PROTEIN_DF)
(19540 * 1000 *2) / 1024^2
(19540 * 1000 * 2 * 32) / 1024^2
load("/home/jbollon/prot_iso_mrna_dev/IsoBayes_paper/Model_results/jurkat/OpenMS_psm_proteo_mRNA_fdr_1/GluC/OpenMS_psm_proteo_mRNA_fdr_1_data_loaded.RData")
dim(data_loaded$PROTEIN_DF)
protease
all_validation_res = cbind()
path_to_res_mod = paste0(path_to_res, "/", name, "/", protease)
load(glue("{path_to_res_mod}/{name}_data_loaded.RData"))
load(glue("{path_to_res_mod}/{name}_MCMC.RData"))
load(glue("{path_to_data}/No{protease}/Validation_prot_psm"))
load_merge_validation
all_validation_res = cbind()
path_to_res_mod = paste0(path_to_res, "/", name, "/", protease)
load(glue("{path_to_res_mod}/{name}_data_loaded.RData"))
load_merge_validation(path_to_res_mod, name, path_to_data, protease, res)
validation_dat = load_merge_validation(path_to_res_mod, name, path_to_data, protease, res)
validation_dat = load_merge_validation(path_to_res_mod, name, path_to_data, protease, res)
all_validation_res_MM = rbind(all_validation_res_MM, validation_dat)
path_to_save = paste0(path_to_res, "/", name)
PALETTE_MODELS = c("IsoBayes" = "#ef9b20",
"IsoBayes_fast" = "#edbf33",
"IsoBayes_mRNA" = "#ea5545",
"IsoBayes_fast_mRNA" = "#f46a9b",
"TPM" = "#50e991",
"Baseline" = "#7eb0d5")
get_roc(validation_dat, name_models, protease, PALETTE_MODELS)
name_models
name
name
name_legend = gsub("OpenMS", "IsoBayes", name)
name_model = name
name_legend = gsub("OpenMS", "IsoBayes", name)
colnames(validation_dat)[colnames(validation_dat) == "Prob_present"] = name_legend
get_roc(validation_dat, name_models, protease, PALETTE_MODELS)
colnames(validation_dat)
PALETTE_MODELS
name_legend = "IsoBayes_mRNA"
path_to_save = paste0(path_to_res, "/", name_model)
colnames(validation_dat)[colnames(validation_dat) == "Prob_present"] = name_legend
get_roc(validation_dat, name_models, protease, PALETTE_MODELS)
colnames(validation_dat)
name_legend
all_validation_res = cbind()
for (protease in proteases) {
path_to_res_mod = paste0(path_to_res, "/", name_model, "/", protease)
load(glue("{path_to_res_mod}/{name_model}_data_loaded.RData"))
validation_dat = load_merge_validation(path_to_res_mod, name_model, path_to_data, protease, res)
all_validation_res_MM = rbind(all_validation_res_MM, validation_dat)
}
all_validation_res = cbind()
for (protease in proteases) {
path_to_res_mod = paste0(path_to_res, "/", name_model, "/", protease)
load(glue("{path_to_res_mod}/{name_model}_data_loaded.RData"))
validation_dat = load_merge_validation(path_to_res_mod, name_model, path_to_data, protease, res)
all_validation_res_MM = rbind(all_validation_res, validation_dat)
}
path_to_save = paste0(path_to_res, "/", name_model)
colnames(validation_dat)[colnames(validation_dat) == "Prob_present"] = name_legend
get_roc(validation_dat, name_models, protease, PALETTE_MODELS)
get_roc(validation_dat, name_models, protease, PALETTE_MODELS)
name_models
validate_all_protease = function(proteases, path_to_res, path_to_data, name_model, res, name_models){
all_validation_res = cbind()
for (protease in proteases) {
path_to_res_mod = paste0(path_to_res, "/", name_model, "/", protease)
load(glue("{path_to_res_mod}/{name_model}_data_loaded.RData"))
validation_dat = load_merge_validation(path_to_res_mod, name_model, path_to_data, protease, res)
all_validation_res_MM = rbind(all_validation_res, validation_dat)
}
colnames(validation_dat)[colnames(validation_dat) == "Prob_present"] = name_models[1]
get_roc(validation_dat, name_models, protease, PALETTE_MODELS)
}
validate_all_protease(proteases, path_to_res, path_to_data, name_model, res, name_models)
name
pp = validate_all_protease(proteases, path_to_res, path_to_data, name_model, res, name_models)
ggsave(glue("{path_to_res}/{name}.png"))
load_merge_validation = function(MCMC_file, validation_file, res){
load(MCMC_file)
load(glue("{path_to_data}/No{protease}/Validation_prot_psm"))
validation_dat = merge(res$isoform_results, VALIDATION_DF_prot, by.y = "proteins", by.x = "Isoform")
validation_dat = merge(validation_dat, data_loaded$PROTEIN_DF[, c("protein_name", "Y_unique")],
by.y = "protein_name", by.x = "Isoform", all.x = TRUE)
validation_dat$Baseline = as.numeric(validation_dat$Y_unique > 0)
validation_dat
}
validate_all_protease
source(glue("{path_wd}/utils_function/save_load_run_inferences.R"))
176-155
210-186
name_model
name_models
library(glue)
library(ggplot2)
DATASET = "jurkat"
PATH_WD = "/home/jbollon/prot_iso_mrna_dev/IsoBayes_paper"
PATH_DATA = glue("/home/jbollon/prot_iso_mrna_dev/{DATASET}") #TODO: mettere i dati in path_wd
PATH_RES_MODEL = glue("{PATH_WD}/Model_results/{DATASET}" )
PATH_RES_CHANGE = glue("{PATH_WD}/Change_protein_mRNA_isoform/{DATASET}")
proteases = list.dirs(PATH_RES_ROBUSTNESS, recursive = FALSE, full.names = FALSE)
source(glue("{PATH_WD}/utils_function/plot_prob_change.R"))
source(glue("{PATH_WD}/utils_function/plot_prob_change_group.R"))
source(glue("{PATH_WD}/utils_function/utils_benchmarking.R"))
######################################################
# Changes in protein and mRNA isoform relative abundances (MM)
######################################################
benchmark_df_all = list()
protease = "Chym"
# load validation dataset from metamorpheus
load(glue("{PATH_DATA}/No{protease}/Validation_prot_psm"))
# load model results
load(glue("{PATH_RES_MODEL}/MM_psm_mRNA_PEP/{protease}/MM_psm_mRNA_PEP_MCMC.RData"))
benchmark_df = merge(VALIDATION_DF_prot, res$isoform_results,
by.x = "proteins", by.y = "Isoform", all = T)
# Eliminio isoforme non presenti nel validation set e in input
benchmark_df = na.omit(benchmark_df)
ths_tpm = min(benchmark_df$TPM[benchmark_df$TPM>0])
library(ggplot2)
library(readr)
library(glue)
source("utils_benchmarking.R")
dataset = "jurkat"
path_wd = "/home/jbollon/prot_iso_mrna_dev/IsoBayes_paper"
path_res_competitors = glue("{path_wd}/Benchmark_results/Benchmarking_{dataset}")
setwd("~/prot_iso_mrna_dev/IsoBayes_paper/Benchmark_results")
library(ggplot2)
library(readr)
library(glue)
source("utils_benchmarking.R")
dataset = "jurkat"
path_wd = "/home/jbollon/prot_iso_mrna_dev/IsoBayes_paper"
path_res_competitors = glue("{path_wd}/Benchmark_results/Benchmarking_{dataset}")
path_data = glue("/home/jbollon/prot_iso_mrna_dev/{dataset}/") #TODO: mettere i dati in path_wd
path_res = glue("{path_wd}/Model_results/{dataset}/" )
source(glue("{path_wd}/utils_function/get_roc.R"))
source(glue("{path_wd}/utils_function/prior_plot.R"))
PALETTE_MODELS = c("Fido" = "#87bc45",
"Epifany" = "#b33dc6",
"IsoBayes_mRNA" = "#ea5545",
"IsoBayes_mRNA_MM_psm" = "#ea5545",
"IsoBayes_mRNA_OpenMS"= "black",
"IsoBayes_mRNA_MM_intensities" = "black",
"IsoBayes_fast_mRNA" = "#f46a9b",
"IsoBayes" = "#ef9b20",
"IsoBayes_fast" = "#edbf33",
"PIA" = "#27aeef")
models = list(IsoBayes = c("_PEP", ""),
IsoBayes_fast = c("", ""),
IsoBayes_mRNA = c("_PEP", "_mRNA"),
IsoBayes_fast_mRNA = c("", "_mRNA")
)
# COMPETITORS vs IsoBayes_openMS vs IsoBayes_openMS_mRNA [PERFORMANCE]
benchmark_df_all = list()
proteases = list.dirs(path_res_competitors, recursive = FALSE, full.names = FALSE)
selected_models = c("IsoBayes", "IsoBayes_mRNA")
# load validation dataset from metamorpheus
load(glue("{path_data}No{protease}/Validation_prot_psm"))
benchmark_df = list(VALIDATION_DF_prot[, c("proteins", "Present")])
for (model in selected_models) {
attribute_model = glue("{models[[model]][2]}{models[[model]][1]}")
load(glue("{path_res}OpenMS{attribute_model}/{protease}/OpenMS{attribute_model}_MCMC.RData"))
benchmark_df = append(benchmark_df, list(res$isoform_results[, c("Isoform", "Prob_present")]))
}
for (i in seq_len(length(benchmark_df)-1)) {
colnames(benchmark_df[[2]]) = paste0(colnames(benchmark_df[[2]]), "_", selected_models[i])
benchmark_df[[1]] = merge(benchmark_df[[1]], benchmark_df[[2]],
by.x = "proteins", by.y = paste0("Isoform_", selected_models[i]), all = T)
benchmark_df[[2]] = NULL
}
# EPIFANY
res = get_score_from_idXML(paste0(path_res_competitors, "/",  protease, "/epifany_0.01.idXML"))
colnames(res) = paste0(colnames(res), "_Epifany")
benchmark_df = merge(benchmark_df, res, by.x = "proteins", by.y = "Isoform_Epifany", all = T)
# FIDO
res = get_score_from_idXML(paste0(path_res_competitors, "/", protease, "/fido_0.01.idXML"))
colnames(res) = paste0(colnames(res), "_Fido")
benchmark_df = merge(benchmark_df, res, by.x = "proteins", by.y = "Isoform_Fido", all = T)
# PIA
path_file = paste0(path_res_competitors, "/", protease, "/pia_results_0.01.mzTab")
system(paste0("fgrep -v MTD ", path_file, " > ",  path_file, ".red"))
res = read_delim(paste0(path_file, ".red"), delim = "\t", escape_double = FALSE, trim_ws = TRUE)
res = as.data.frame(res[res$PRH == "PRT", c("accession", "best_search_engine_score[1]")])
colnames(res) = c("Isoform_PIA", "score_PIA")
res$score_PIA = as.numeric(res$score_PIA)
benchmark_df = merge(benchmark_df, res, by.x = "proteins", by.y = "Isoform_PIA", all = T)
# proteine presenti in input
iso_input = get_score_from_idXML(glue("{path_data}Only{protease}/merge_index_percolator_pep_switched_0.01.idXML"))
benchmark_df = merge(benchmark_df, iso_input, by.x = "proteins", by.y = "Isoform", all = T)
# Eliminio isoforme non presenti nel validation set
benchmark_df = benchmark_df[!is.na(benchmark_df$Present), ]
# Tengo quelle in input
benchmark_df = benchmark_df[!is.na(benchmark_df$score), ]
# 0 se modello non trova l'isoforma
benchmark_df[is.na(benchmark_df)] = 0
benchmark_df$score = NULL
colnames(benchmark_df) = gsub(".*Prob_present_", "", colnames(benchmark_df))
colnames(benchmark_df) = gsub(".*score_", "", colnames(benchmark_df))
plot_tab = get_roc(benchmark_df, c(selected_models, "Epifany", "Fido", "PIA"))
plot_tab
plot_tab
# load validation dataset from metamorpheus
load(glue("{path_data}No{protease}/Validation_prot_psm"))
head(VALIDATION_DF_prot)
selected_models
load(glue("{path_res}OpenMS{attribute_model}/{protease}/OpenMS{attribute_model}_data_loaded.RData"))
head(data_loaded$PROTEIN_DF)
dim(data_loaded$PROTEIN_DF)
dim(res$isoform_results)
load(glue("{path_res}OpenMS{attribute_model}/{protease}/OpenMS{attribute_model}_MCMC.RData"))
load(glue("{path_res}OpenMS{attribute_model}/{protease}/OpenMS{attribute_model}_data_loaded.RData"))
dim(res$isoform_results)
colnames(res$isoform_results)
head( data_loaded$PROTEIN_DF)
res$isoform_results = merge(res$isoform_results, data_loaded$PROTEIN_DF,
by.x = "Isoform", by.y = "protein_name")
# load validation dataset from metamorpheus
load(glue("{path_data}No{protease}/Validation_prot_psm"))
benchmark_df = list(VALIDATION_DF_prot[, c("proteins", "Present")])
for (model in selected_models) {
attribute_model = glue("{models[[model]][2]}{models[[model]][1]}")
load(glue("{path_res}OpenMS{attribute_model}/{protease}/OpenMS{attribute_model}_MCMC.RData"))
load(glue("{path_res}OpenMS{attribute_model}/{protease}/OpenMS{attribute_model}_data_loaded.RData"))
res$isoform_results = merge(res$isoform_results, data_loaded$PROTEIN_DF,
by.x = "Isoform", by.y = "protein_name")
benchmark_df = append(benchmark_df, list(res$isoform_results[, c("Isoform", "Prob_present", "Y_unique")]))
}
for (i in seq_len(length(benchmark_df)-1)) {
colnames(benchmark_df[[2]]) = paste0(colnames(benchmark_df[[2]]), "_", selected_models[i])
benchmark_df[[1]] = merge(benchmark_df[[1]], benchmark_df[[2]],
by.x = "proteins", by.y = paste0("Isoform_", selected_models[i]), all = T)
benchmark_df[[2]] = NULL
}
# EPIFANY
res = get_score_from_idXML(paste0(path_res_competitors, "/",  protease, "/epifany_0.01.idXML"))
colnames(res) = paste0(colnames(res), "_Epifany")
benchmark_df = merge(benchmark_df, res, by.x = "proteins", by.y = "Isoform_Epifany", all = T)
# FIDO
res = get_score_from_idXML(paste0(path_res_competitors, "/", protease, "/fido_0.01.idXML"))
colnames(res) = paste0(colnames(res), "_Fido")
benchmark_df = merge(benchmark_df, res, by.x = "proteins", by.y = "Isoform_Fido", all = T)
# PIA
path_file = paste0(path_res_competitors, "/", protease, "/pia_results_0.01.mzTab")
system(paste0("fgrep -v MTD ", path_file, " > ",  path_file, ".red"))
res = read_delim(paste0(path_file, ".red"), delim = "\t", escape_double = FALSE, trim_ws = TRUE)
res = as.data.frame(res[res$PRH == "PRT", c("accession", "best_search_engine_score[1]")])
colnames(res) = c("Isoform_PIA", "score_PIA")
res$score_PIA = as.numeric(res$score_PIA)
benchmark_df = merge(benchmark_df, res, by.x = "proteins", by.y = "Isoform_PIA", all = T)
# proteine presenti in input
iso_input = get_score_from_idXML(glue("{path_data}Only{protease}/merge_index_percolator_pep_switched_0.01.idXML"))
benchmark_df = merge(benchmark_df, iso_input, by.x = "proteins", by.y = "Isoform", all = T)
# Eliminio isoforme non presenti nel validation set
benchmark_df = benchmark_df[!is.na(benchmark_df$Present), ]
# Tengo quelle in input
benchmark_df = benchmark_df[!is.na(benchmark_df$score), ]
# 0 se modello non trova l'isoforma
benchmark_df[is.na(benchmark_df)] = 0
benchmark_df$score = NULL
colnames(benchmark_df) = gsub(".*Prob_present_", "", colnames(benchmark_df))
colnames(benchmark_df) = gsub(".*score_", "", colnames(benchmark_df))
head(benchmark_df)
identical(benchmark_df$Y_unique_IsoBayes, benchmark_df$Y_unique_IsoBayes_mRNA)
# Focus on validation without isoform with Unique Peptide (UP)
plot_tab = get_roc(benchmark_df[benchmark_df$Y_unique_IsoBayes == 0, ], c(selected_models, "Epifany", "Fido", "PIA"))
plot_tab
get_roc
plot_tab = get_roc(benchmark_df, c(selected_models, "Epifany", "Fido", "PIA"))
plot_tab
# Focus on validation without isoform with Unique Peptide (UP)
plot_tab = get_roc(benchmark_df[benchmark_df$Y_unique_IsoBayes == 0, ], c(selected_models, "Epifany", "Fido", "PIA"))
plot_tab
library(ggplot2)
library(readr)
library(glue)
source("utils_benchmarking.R")
dataset = "jurkat"
path_wd = "/home/jbollon/prot_iso_mrna_dev/IsoBayes_paper"
path_res_competitors = glue("{path_wd}/Benchmark_results/Benchmarking_{dataset}")
path_data = glue("/home/jbollon/prot_iso_mrna_dev/{dataset}/") #TODO: mettere i dati in path_wd
path_res = glue("{path_wd}/Model_results/{dataset}/" )
source(glue("{path_wd}/utils_function/get_roc.R"))
source(glue("{path_wd}/utils_function/prior_plot.R"))
PALETTE_MODELS = c("Fido" = "#87bc45",
"Epifany" = "#b33dc6",
"IsoBayes_mRNA" = "#ea5545",
"IsoBayes_mRNA_MM_psm" = "#ea5545",
"IsoBayes_mRNA_OpenMS"= "black",
"IsoBayes_mRNA_MM_intensities" = "black",
"IsoBayes_fast_mRNA" = "#f46a9b",
"IsoBayes" = "#ef9b20",
"IsoBayes_fast" = "#edbf33",
"PIA" = "#27aeef")
models = list(IsoBayes = c("_PEP", ""),
IsoBayes_fast = c("", ""),
IsoBayes_mRNA = c("_PEP", "_mRNA"),
IsoBayes_fast_mRNA = c("", "_mRNA")
)
# COMPETITORS vs IsoBayes_openMS vs IsoBayes_openMS_mRNA [PERFORMANCE]
benchmark_df_all = list()
proteases = list.dirs(path_res_competitors, recursive = FALSE, full.names = FALSE)
selected_models = c("IsoBayes", "IsoBayes_mRNA")
for(protease in proteases){
# load validation dataset from metamorpheus
load(glue("{path_data}No{protease}/Validation_prot_psm"))
benchmark_df = list(VALIDATION_DF_prot[, c("proteins", "Present")])
for (model in selected_models) {
attribute_model = glue("{models[[model]][2]}{models[[model]][1]}")
load(glue("{path_res}OpenMS{attribute_model}/{protease}/OpenMS{attribute_model}_MCMC.RData"))
load(glue("{path_res}OpenMS{attribute_model}/{protease}/OpenMS{attribute_model}_data_loaded.RData"))
res$isoform_results = merge(res$isoform_results, data_loaded$PROTEIN_DF,
by.x = "Isoform", by.y = "protein_name")
benchmark_df = append(benchmark_df, list(res$isoform_results[, c("Isoform", "Prob_present", "Y_unique")]))
}
for (i in seq_len(length(benchmark_df)-1)) {
colnames(benchmark_df[[2]]) = paste0(colnames(benchmark_df[[2]]), "_", selected_models[i])
benchmark_df[[1]] = merge(benchmark_df[[1]], benchmark_df[[2]],
by.x = "proteins", by.y = paste0("Isoform_", selected_models[i]), all = T)
benchmark_df[[2]] = NULL
}
# EPIFANY
res = get_score_from_idXML(paste0(path_res_competitors, "/",  protease, "/epifany_0.01.idXML"))
colnames(res) = paste0(colnames(res), "_Epifany")
benchmark_df = merge(benchmark_df, res, by.x = "proteins", by.y = "Isoform_Epifany", all = T)
# FIDO
res = get_score_from_idXML(paste0(path_res_competitors, "/", protease, "/fido_0.01.idXML"))
colnames(res) = paste0(colnames(res), "_Fido")
benchmark_df = merge(benchmark_df, res, by.x = "proteins", by.y = "Isoform_Fido", all = T)
# PIA
path_file = paste0(path_res_competitors, "/", protease, "/pia_results_0.01.mzTab")
system(paste0("fgrep -v MTD ", path_file, " > ",  path_file, ".red"))
res = read_delim(paste0(path_file, ".red"), delim = "\t", escape_double = FALSE, trim_ws = TRUE)
res = as.data.frame(res[res$PRH == "PRT", c("accession", "best_search_engine_score[1]")])
colnames(res) = c("Isoform_PIA", "score_PIA")
res$score_PIA = as.numeric(res$score_PIA)
benchmark_df = merge(benchmark_df, res, by.x = "proteins", by.y = "Isoform_PIA", all = T)
# proteine presenti in input
iso_input = get_score_from_idXML(glue("{path_data}Only{protease}/merge_index_percolator_pep_switched_0.01.idXML"))
benchmark_df = merge(benchmark_df, iso_input, by.x = "proteins", by.y = "Isoform", all = T)
# Eliminio isoforme non presenti nel validation set
benchmark_df = benchmark_df[!is.na(benchmark_df$Present), ]
# Tengo quelle in input
benchmark_df = benchmark_df[!is.na(benchmark_df$score), ]
# 0 se modello non trova l'isoforma
benchmark_df[is.na(benchmark_df)] = 0
benchmark_df$score = NULL
colnames(benchmark_df) = gsub(".*Prob_present_", "", colnames(benchmark_df))
colnames(benchmark_df) = gsub(".*score_", "", colnames(benchmark_df))
plot_tab = get_roc(benchmark_df, c(selected_models, "Epifany", "Fido", "PIA"))
ggsave(glue("{path_res_competitors}/{protease}/ROC_main_result.png"), plot = plot_tab$gplot)
write.csv(plot_tab$sum_stat, file = glue("{path_res_competitors}/{protease}/SumTab_main_result.csv"))
benchmark_df_all = rbind(benchmark_df_all, benchmark_df)
# Focus on validation without isoform with Unique Peptide (UP)
plot_tab = get_roc(benchmark_df[benchmark_df$Y_unique_IsoBayes == 0, ], c(selected_models, "Epifany", "Fido", "PIA"))
ggsave(glue("{path_res_competitors}/{protease}/ROC_main_result_no_UP.png"), plot = plot_tab$gplot)
write.csv(plot_tab$sum_stat, file = glue("{path_res_competitors}/{protease}/SumTab_main_result_no_UP.csv"))
}
plot_tab = get_roc(benchmark_df_all, c(selected_models, "Epifany", "Fido", "PIA"))
ggsave(glue("{path_res_competitors}/ROC_main_result.png"), plot = plot_tab$gplot)
write.csv(plot_tab$sum_stat, file = glue("{path_res_competitors}/SumTab_main_result.csv"))
# Focus on validation without isoform with Unique Peptide (UP)
plot_tab = get_roc(benchmark_df_all[benchmark_df_all$Y_unique_IsoBayes == 0, ], c(selected_models, "Epifany", "Fido", "PIA"))
ggsave(glue("{path_res_competitors}/ROC_main_result_no_UP.png"), plot = plot_tab$gplot)
write.csv(plot_tab$sum_stat, file = glue("{path_res_competitors}/SumTab_main_result_no_UP.csv"))
